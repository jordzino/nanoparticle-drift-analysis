% Drift Correction Script

% Read the CSV file containing the synthetic data generated by Python
opts = detectImportOptions('nanoparticle_positionsNP101d.csv');
opts = setvartype(opts, {'ParticleID', 'FrameNumber'}, 'double');
first_matrix = readmatrix('nanoparticle_positionsNP101d.csv', opts);

% Display the first few rows to verify the data
disp('First few rows of the first_matrix:');
disp(first_matrix(1:10, :));

% Determine the number of frames and particles
num_frames = max(first_matrix(:, 2)) + 1;  % Since frame numbers start from 0
num_particles = max(first_matrix(:, 1)) + 1;  % Since particle IDs start from 0

% Initialize positions array with NaNs (to handle non-continuous IDs and frame numbers)
positions = nan(num_frames, num_particles, 3);

% Fill the positions array
for i = 1:size(first_matrix, 1)
    particle_id = first_matrix(i, 1);
    frame_num = first_matrix(i, 2);
    % Display the current particle ID and frame number for debugging
    disp(['Row ', num2str(i), ': Particle ID = ', num2str(particle_id), ', Frame Number = ', num2str(frame_num)]);
    % Ensure particle_id and frame_num are positive integers
    if particle_id >= 0 && frame_num >= 0
        % Convert to integers for indexing
        particle_id = round(particle_id);
        frame_num = round(frame_num);
        positions(frame_num + 1, particle_id + 1, 1) = first_matrix(i, 3); % X-coordinate
        positions(frame_num + 1, particle_id + 1, 2) = first_matrix(i, 4); % Y-coordinate
        positions(frame_num + 1, particle_id + 1, 3) = first_matrix(i, 5); % Z-coordinate
    else
        disp(['Invalid particle ID or frame number at row ', num2str(i)]);
    end
end

% Calculate the average position per frame, ignoring NaNs
avpos = squeeze(nanmean(positions, 2));

% Calculate the mean drift between each pair of frames
mean_drift = zeros(num_frames - 1, 3);
for transition = 1:size(mean_drift, 1)
    mean_drift(transition, 1) = avpos(transition + 1, 1) - avpos(transition, 1);
    mean_drift(transition, 2) = avpos(transition + 1, 2) - avpos(transition, 2);
    mean_drift(transition, 3) = avpos(transition + 1, 3) - avpos(transition, 3);
end

% Separate x, y, and z drift components
driftx = mean_drift(:, 1);
drifty = mean_drift(:, 2);
driftz = mean_drift(:, 3);

% Calculate drift velocity estimate
drift_velocity_estimate = mean(mean_drift, 1, 'omitnan');

% Calculate the variance of the drift velocity
%drift_velocity_variance = var(mean_drift, 0, 1, 'omitnan');
drift_velocity_variance = var(mean_drift, 'omitnan');

% Output the estimated drift and variance to a CSV file
estimated_drift = [drift_velocity_estimate; drift_velocity_variance];
csvwrite('estimated_drift.csv', estimated_drift);

% Display the estimated drift velocity and variance
disp(['Estimated Drift Velocity: X = ', num2str(drift_velocity_estimate(1)), ', Y = ', num2str(drift_velocity_estimate(2)), ', Z = ', num2str(drift_velocity_estimate(3))]);
disp(['Drift Velocity Variance: X = ', num2str(drift_velocity_variance(1)), ', Y = ', num2str(drift_velocity_variance(2)), ', Z = ', num2str(drift_velocity_variance(3))]);
